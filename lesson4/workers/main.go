package main

import (
	"fmt"
	"time"
)

func main() {

	val := 0
	pool := make(chan struct{}, 1) // пул воркеров (одновременно можно запустить только один)
	done := make(chan struct{})    // канал для ожидания завершения воркеров

	go func() {
		for i := 0; i < 1000; i++ {
			// ожидать возможность запуска воркера
			pool <- struct{}{}

			// запустить воркер
			go func(n int) {
				defer func() {
					// прочитать из пула, т.е. сообщить,
					// что освободилось место для нового воркера
					<-pool
				}()
				val += 1
				//fmt.Println("Горутина: ", n, "Значение: ", val)
			}(i)
		}

		// без засыпания канал done закроется до того, как завершиться последняя горутина
		// и значение val при выводе будет на 1 меньше, чем требуется
		time.Sleep(100 * time.Microsecond)

		close(done)
	}()

	<-done // ожидать закрытия канала done (завершения всех горутин)
	fmt.Printf("Значение = %d\n", val)
}
