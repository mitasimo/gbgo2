package main

import (
	"fmt"
	"sync"
)

func main() {
	var (
		wg  sync.WaitGroup // для ожидания завершения всех потоков
		mt  sync.Mutex
		val int
	)

	pool := make(chan struct{}, 10) // пул горутин

	for i := 0; i < 1000; i++ {
		// ожидать возможность запуска горутины
		pool <- struct{}{}

		// перед запуском новой горутины увеличить счетчик
		wg.Add(1)

		// запустить горутину
		go func() {
			defer func() {
				// прочитать из пула, т.е. сообщить,
				// что освободилось место для новой горутины
				<-pool
				// уменьшить счетчик ожидания
				wg.Done()
			}()

			mt.Lock()         // перед изменением значения установить блокировку
			defer mt.Unlock() // снаять блокировку после
			val++             // увеличить значение на 1

		}()
	}

	// ожидать завершения всех горутин
	wg.Wait()
	fmt.Printf("Значение = %d\n", val)
}
